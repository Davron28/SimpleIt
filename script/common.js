"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}var btn=document.querySelector(".header__burger"),btnMenu=document.querySelector(".header__menu");btn.addEventListener("click",function(){btnMenu.classList.toggle("active"),btn.classList.toggle("active")});var ItcAccordion=function(){function a(b,c){_classCallCheck(this,a),this._el="string"==typeof b?document.querySelector(b):b;this._config=Object.assign({alwaysOpen:!1},c),this.addEventListener()}return _createClass(a,[{key:"addEventListener",value:function addEventListener(){var a=this;this._el.addEventListener("click",function(b){var c=b.target.closest(".accordion__header");if(!c)return b.target.closest(".accordion__header");if(!a._config.alwaysOpen){var d=a._el.querySelector(".accordion__item_show");d&&(d===c.parentElement?null:d.classList.toggle("accordion__item_show"))}c.parentElement.classList.toggle("accordion__item_show")})}}]),a}();new ItcAccordion("#accordion-1");var forEach=function(a,b,c){for(var d=0;d<a.length;d++)b.call(c,d,a[d])},spinner=document.querySelector("#spinner"),angle=0,images=document.querySelectorAll("#spinner figure"),numpics=images.length,degInt=360/numpics,start=0,current=1;forEach(images,function(a){images[a].style.webkitTransform="rotateY(-"+start+"deg)",images[a].style.transform="rotateY(-"+start+"deg)",images[a].addEventListener("click",function(){this.classList.contains("current")&&this.classList.toggle("focus")}),start+=degInt});function setCurrent(a){document.querySelector("figure#spinner figure:nth-child("+a+")").classList.add("current")}function galleryspin(a){forEach(images,function(a){images[a].classList.remove("current"),images[a].classList.remove("focus"),images[a].classList.remove("caption")}),a?(angle-=degInt,--current,0==current&&(current=numpics)):(angle+=degInt,++current,current>numpics&&(current=1)),spinner.setAttribute("style","-webkit-transform: rotateY("+angle+"deg); transform: rotateY("+angle+"deg)"),setCurrent(current)}document.body.onkeydown=function(a){switch(a.which){case 37:galleryspin("-");break;case 39:galleryspin("");break;case 90:document.querySelector("figure#spinner figure.current").classList.toggle("focus");break;case 67:document.querySelector("figure#spinner figure.current").classList.toggle("caption");break;default:return;}a.preventDefault()};function mouseMove(){}function mouseUp(){document.removeEventListener("mousemove",mouseMove,!1),document.removeEventListener("mouseup",mouseUp,!1)}spinner.addEventListener("mousedown",function(a){a.pageX;document.addEventListener("mousemove",mouseMove,!1),document.addEventListener("mouseup",mouseUp,!1)},!1),setCurrent(1);var features=document.querySelectorAll(".feature"),observer=new IntersectionObserver(function(a){a.forEach(function(a){console.log(a),.4<a.intersectionRatio?a.target.classList.add("show-feature"):a.target.classList.remove("show-feature")})},{threshold:.4});features.forEach(function(a){return observer.observe(a)}),console.log(observer);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
